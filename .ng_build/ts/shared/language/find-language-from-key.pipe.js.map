{"version":3,"sources":["find-language-from-key.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAA,EAAoB,MAAA,eAAA,CAAA;AAC7B,MAEC;IAFD;QAGY,cAAA,GAAiB;YADrB,OAAO,EAEE,EAAE,IAAA,EAAM,SAAA,EAAW,GAAA,EAAK,IAAA,EAAK;YADtC,OAAO,EAEE,EAAE,IAAA,EAAM,QAAA,EAAS;YAD1B,IAAI,EAEE,EAAE,IAAA,EAAM,SAAA,EAAU;YADxB,IAAI,EAEE,EAAE,IAAA,EAAM,OAAA,EAAQ;YADtB,IAAI,EAEE,EAAE,IAAA,EAAM,OAAA,EAAQ;YADtB,6FAA6F;SAChG,CAEC;IAqBN,CAAC;IAtBD;;;OAGG;IACH,SAFK,CAAA,IAAA;QAGG,OAFO,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,CAAC,IAAC,CAAI;IAGrC,CAAC;IACL;;;OAGG;IACH,KANK,CAAA,IAAA;QAOG,OANO,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,CAAC,GAAC,CAAG;IAOpC,CAAC;;AALE,kCAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,EAAE,IAAC,EAAK,qBAAA,EAAsB,EAAC,EAAG;CAOrD,CANC;AAOF;;GAEG;AAPF,sCAAA,GAAA,GAAA,EAAA,CAAA,EASA,CAAC;AAGF;IACA,gBAAgB;IAChB,uBAAuB,CAAC,UAAU,CAAC;IACnC;;;OAGG;IACH,uBAAuB,CAAC,cAAc,CAAC;IACvC,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,SAAS,CAAC;AAC5C,CAAC","file":"find-language-from-key.pipe.js","sourceRoot":"","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nexport class FindLanguageFromKeyPipe implements PipeTransform {\nprivate languages: any = {\n        'ar-ly': { name: 'العربية', rtl: true },\n        'zh-cn': { name: '中文（简体）' },\n        'en': { name: 'English' },\n        'hi': { name: 'हिंदी' },\n        'ta': { name: 'தமிழ்' }\n        // jhipster-needle-i18n-language-key-pipe - JHipster will add/remove languages in this object\n    };\n/**\n * @param {?} lang\n * @return {?}\n */\ntransform(lang: string): string {\n        return this.languages[lang].name;\n    }\n/**\n * @param {?} lang\n * @return {?}\n */\nisRTL(lang: string): boolean {\n        return this.languages[lang].rtl;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'findLanguageFromKey'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FindLanguageFromKeyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nFindLanguageFromKeyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFindLanguageFromKeyPipe.ctorParameters;\n/** @type {?} */\nFindLanguageFromKeyPipe.prototype.languages;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}