{"version":3,"sources":["principal.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AAEpB,OAAO,EAAE,OAAA,EAAQ,MAAA,cAAA,CAAA;AACjB,OAAO,EAAE,cAAA,EAAe,MAAA,mBAAA,CAAA;AACxB,MAEC;IAED;;OAEG;IACH,YACgB,OAAS;QAAT,YAAA,GAAA,OAAA,CAAS;QAJb,kBAAA,GAAgB,KAAA,CAAM;QACtB,wBAAA,GAAsB,IAAI,OAAA,EAAY,CAAG;IAI9C,CAAC;IACR;;;OAGG;IACH,YAHK,CAAA,QAAA;QAIG,IAAI,CAHC,YAAC,GAAc,QAAA,CAAS;QAI7B,IAAI,CAHC,aAAC,GAAe,QAAA,KAAa,IAAA,CAAK;QAIvC,IAAI,CAHC,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,CAAC;IAIrD,CAAC;IACL;;;OAGG;IACH,eANK,CAAA,WAAA;QAOG,OANO,OAAA,CAAQ,OAAC,CAAO,IAAC,CAAI,qBAAC,CAAqB,WAAC,CAAW,CAAC,CAAC;IAOpE,CAAC;IACL;;;OAGG;IACH,qBATK,CAAA,WAAA;QAUG,IAAI,CATC,IAAC,CAAI,aAAC,IAAgB,CAAA,IAAE,CAAI,YAAC,IAAe,CAAA,IAAE,CAAI,YAAC,CAAY,WAAC,EAAY;YAU7E,OATO,KAAA,CAAM;SAUhB;QAED,KAAK,IATC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,WAAA,CAAY,MAAC,EAAO,CAAA,EAAE,EAAG;YAUzC,IAAI,IATC,CAAI,YAAC,CAAY,WAAC,CAAW,OAAC,CAAO,WAAC,CAAW,CAAC,CAAC,CAAC,KAAK,CAAA,CAAE,EAAE;gBAU9D,OATO,IAAA,CAAK;aAUf;SACJ;QAED,OATO,KAAA,CAAM;IAUjB,CAAC;IACL;;;OAGG;IACH,YAZK,CAAA,SAAA;QAaG,IAAI,CAZC,IAAC,CAAI,aAAC,EAAc;YAatB,OAZO,OAAA,CAAQ,OAAC,CAAO,KAAC,CAAK,CAAC;SAahC;QAED,OAZO,IAAA,CAAK,QAAC,EAAQ,CAAE,IAAC,CAAI,CAAC,EAAC,EAAG,EAAA;YAa7B,OAZO,OAAA,CAAQ,OAAC,CAAO,EAAC,CAAE,WAAC,IAAc,EAAA,CAAG,WAAC,CAAW,OAAC,CAAO,SAAC,CAAS,KAAK,CAAA,CAAE,CAAC,CAAC;QAavF,CAAC,EAZE,GAAG,EAAA;YAaF,OAZO,OAAA,CAAQ,OAAC,CAAO,KAAC,CAAK,CAAC;QAalC,CAAC,CAZC,CAAC;IAaP,CAAC;IACL;;;OAGG;IACH,QAfK,CAAA,KAAA;QAgBG,IAAI,KAfC,KAAS,IAAA,EAAM;YAgBhB,IAAI,CAfC,YAAC,GAAc,SAAA,CAAU;SAgBjC;QAED,4EAA4E;QAC5E,gDAAgD;QAChD,IAAI,IAfC,CAAI,YAAC,EAAa;YAgBnB,OAfO,OAAA,CAAQ,OAAC,CAAO,IAAC,CAAI,YAAC,CAAY,CAAC;SAgB7C;QAED,gGAAgG;QAChG,OAfO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAG,CAAE,SAAC,EAAS,CAAE,IAAC,CAAI,CAAC,OAAC,EAAQ,EAAA;YAgBjD,IAAI,OAfC,EAAQ;gBAgBT,IAAI,CAfC,YAAC,GAAc,OAAA,CAAQ;gBAgB5B,IAAI,CAfC,aAAC,GAAe,IAAA,CAAK;aAgB7B;iBAfM;gBAgBH,IAAI,CAfC,YAAC,GAAc,IAAA,CAAK;gBAgBzB,IAAI,CAfC,aAAC,GAAe,KAAA,CAAM;aAgB9B;YACD,IAAI,CAfC,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,CAAC;YAgBjD,OAfO,IAAA,CAAK,YAAC,CAAY;QAgB7B,CAAC,CAfC,CAAC,KAAC,CAAK,CAAC,GAAC,EAAI,EAAA;YAgBX,IAAI,CAfC,YAAC,GAAc,IAAA,CAAK;YAgBzB,IAAI,CAfC,aAAC,GAAe,KAAA,CAAM;YAgB3B,IAAI,CAfC,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,CAAC;YAgBjD,OAfO,IAAA,CAAK;QAgBhB,CAAC,CAfC,CAAC;IAgBP,CAAC;IACL;;OAEG;IACH,eAjBK;QAkBG,OAjBO,IAAA,CAAK,aAAC,CAAa;IAkB9B,CAAC;IACL;;OALE;IAQF,kBAnBK;QAoBG,OAnBO,IAAA,CAAK,YAAC,KAAgB,SAAA,CAAU;IAoB3C,CAAC;IACL;;OAEG;IACH,sBArBK;QAsBG,OArBO,IAAA,CAAK,mBAAC,CAAmB,YAAC,EAAY,CAAE;IAsBnD,CAAC;IACL;;OAEG;IACH,WAvBK;QAwBG,OAvBO,IAAA,CAAK,kBAAC,EAAkB,CAAE,CAAA,CAAE,IAAA,CAAK,YAAC,CAAY,QAAC,CAAQ,CAAA,CAAE,IAAA,CAAK;IAwBzE,CAAC;;AAtBE,oBAAA,GAAoC;IAwB3C,EAvBE,IAAA,EAAM,UAAA,EAAW;CAwBlB,CAvBC;AAwBF;;GAEG;AAxBF,wBAAA,GAAA,GAAA,EAAA,CAAA;IA0BD,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,CAAC;AAGF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC;IACjC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;IAClC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACxC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;AAC5B,CAAC","file":"principal.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { AccountService } from './account.service';\nexport class Principal {\nprivate userIdentity: any;\nprivate authenticated = false;\nprivate authenticationState = new Subject<any>();\n/**\n * @param {?} account\n */\nconstructor(\nprivate account: AccountService\n    ) {}\n/**\n * @param {?} identity\n * @return {?}\n */\nauthenticate(identity) {\n        this.userIdentity = identity;\n        this.authenticated = identity !== null;\n        this.authenticationState.next(this.userIdentity);\n    }\n/**\n * @param {?} authorities\n * @return {?}\n */\nhasAnyAuthority(authorities: string[]): Promise<boolean> {\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\n    }\n/**\n * @param {?} authorities\n * @return {?}\n */\nhasAnyAuthorityDirect(authorities: string[]): boolean {\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n            return false;\n        }\n\n        for (let /** @type {?} */ i = 0; i < authorities.length; i++) {\n            if (this.userIdentity.authorities.indexOf(authorities[i]) !== -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n/**\n * @param {?} authority\n * @return {?}\n */\nhasAuthority(authority: string): Promise<boolean> {\n        if (!this.authenticated) {\n           return Promise.resolve(false);\n        }\n\n        return this.identity().then((id) => {\n            return Promise.resolve(id.authorities && id.authorities.indexOf(authority) !== -1);\n        }, () => {\n            return Promise.resolve(false);\n        });\n    }\n/**\n * @param {?=} force\n * @return {?}\n */\nidentity(force?: boolean): Promise<any> {\n        if (force === true) {\n            this.userIdentity = undefined;\n        }\n\n        // check and see if we have retrieved the userIdentity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (this.userIdentity) {\n            return Promise.resolve(this.userIdentity);\n        }\n\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n        return this.account.get().toPromise().then((account) => {\n            if (account) {\n                this.userIdentity = account;\n                this.authenticated = true;\n            } else {\n                this.userIdentity = null;\n                this.authenticated = false;\n            }\n            this.authenticationState.next(this.userIdentity);\n            return this.userIdentity;\n        }).catch((err) => {\n            this.userIdentity = null;\n            this.authenticated = false;\n            this.authenticationState.next(this.userIdentity);\n            return null;\n        });\n    }\n/**\n * @return {?}\n */\nisAuthenticated(): boolean {\n        return this.authenticated;\n    }\n/**\n * @return {?}\n */\nisIdentityResolved(): boolean {\n        return this.userIdentity !== undefined;\n    }\n/**\n * @return {?}\n */\ngetAuthenticationState(): Observable<any> {\n        return this.authenticationState.asObservable();\n    }\n/**\n * @return {?}\n */\ngetImageUrl(): String {\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AccountService, },\n];\n}\n\nfunction Principal_tsickle_Closure_declarations() {\n/** @type {?} */\nPrincipal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPrincipal.ctorParameters;\n/** @type {?} */\nPrincipal.prototype.userIdentity;\n/** @type {?} */\nPrincipal.prototype.authenticated;\n/** @type {?} */\nPrincipal.prototype.authenticationState;\n/** @type {?} */\nPrincipal.prototype.account;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}