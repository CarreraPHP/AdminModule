{"version":3,"sources":["state-storage.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAE,qBAAA,EAAsB,MAAA,gBAAA,CAAA;AAC/B,MAEC;IADD;;OAEG;IACH,YAAgB,eAAiB;QAAjB,oBAAA,GAAA,eAAA,CAAiB;IAE1B,CAAC;IACR;;OAEG;IACH,gBAHK;QAIG,OAHO,IAAA,CAAK,eAAC,CAAe,QAAC,CAAQ,eAAC,CAAe,CAAC;IAI1D,CAAC;IACL;;OAEG;IACH,kBALK;QAMG,IAAI,CALC,eAAC,CAAe,KAAC,CAAK,eAAC,CAAe,CAAC;IAMhD,CAAC;IACL;;;;OAIG;IACH,kBATK,CAAA,iBAAA,EAAA,mBAAA;QAUG,MAAM,gBAAgB,CAThB,aAAA,GAAgB,EAAE,MAAA,EAAQ,iBAAA,EAAmB,QAAA,EAAU,mBAAA,EAAoB,CAAE;QAUnF,IAAI,CATC,eAAC,CAAe,KAAC,CAAK,eAAC,EAAgB,aAAA,CAAc,CAAC;IAU/D,CAAC;IACL;;OAEG;IACH,mBAXK;QAYG,OAXO,IAAA,CAAK,eAAC,CAAe,QAAC,CAAQ,kBAAC,CAAkB,CAAC;IAY7D,CAAC;IACL;;;OAGG;IACH,QAdK,CAAA,GAAA;QAeG,IAAI,CAdC,eAAC,CAAe,KAAC,CAAK,aAAC,EAAc,GAAA,CAAI,CAAC;IAenD,CAAC;IACL;;OAEG;IACH,MAhBK;QAiBG,OAhBO,IAAA,CAAK,eAAC,CAAe,QAAC,CAAQ,aAAC,CAAa,CAAC;IAiBxD,CAAC;IACL;;;;;OAFE;IAQF,qBArBK,CAAA,gBAAA,EAAA,sBAAA,EAAA,SAAA;QAsBG,MAAM,gBAAgB,CArBhB,eAAA,GAAkB;YAsBpB,aAAa,EArBE;gBAsBX,MAAM,EArBE,gBAAA,CAAiB,IAAC;gBAsB1B,MAAM,EArBE,gBAAA,CAAiB,IAAC;aAsB7B;YACD,QAAQ,EArBE,sBAAA;YAsBV,MAAM,EArBE;gBAsBJ,MAAM,EArBE,SAAA,CAAU,IAAC;aAsBtB;SACJ,CArBC;QAsBF,IAAI,CArBC,eAAC,CAAe,KAAC,CAAK,kBAAC,EAAmB,eAAA,CAAgB,CAAC;IAsBpE,CAAC;;AApBE,8BAAA,GAAoC;IAsB3C,EArBE,IAAA,EAAM,UAAA,EAAW;CAsBlB,CArBC;AAsBF;;GAEG;AAtBF,kCAAA,GAAA,GAAA,EAAA,CAAA;IAwBD,EAAC,IAAI,EAAE,qBAAqB,GAAG;CAC9B,CAAC;AAGF;IACA,gBAAgB;IAChB,mBAAmB,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;AAC9C,CAAC","file":"state-storage.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SessionStorageService } from 'ng2-webstorage';\nexport class StateStorageService {\n/**\n * @param {?} $sessionStorage\n */\nconstructor(\nprivate $sessionStorage: SessionStorageService\n    ) {}\n/**\n * @return {?}\n */\ngetPreviousState() {\n        return this.$sessionStorage.retrieve('previousState');\n    }\n/**\n * @return {?}\n */\nresetPreviousState() {\n        this.$sessionStorage.clear('previousState');\n    }\n/**\n * @param {?} previousStateName\n * @param {?} previousStateParams\n * @return {?}\n */\nstorePreviousState(previousStateName, previousStateParams) {\n        const /** @type {?} */ previousState = { 'name': previousStateName, 'params': previousStateParams };\n        this.$sessionStorage.store('previousState', previousState);\n    }\n/**\n * @return {?}\n */\ngetDestinationState() {\n        return this.$sessionStorage.retrieve('destinationState');\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nstoreUrl(url: string) {\n        this.$sessionStorage.store('previousUrl', url);\n    }\n/**\n * @return {?}\n */\ngetUrl() {\n        return this.$sessionStorage.retrieve('previousUrl');\n    }\n/**\n * @param {?} destinationState\n * @param {?} destinationStateParams\n * @param {?} fromState\n * @return {?}\n */\nstoreDestinationState(destinationState, destinationStateParams, fromState) {\n        const /** @type {?} */ destinationInfo = {\n            'destination': {\n                'name': destinationState.name,\n                'data': destinationState.data,\n            },\n            'params': destinationStateParams,\n            'from': {\n                'name': fromState.name,\n            }\n        };\n        this.$sessionStorage.store('destinationState', destinationInfo);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SessionStorageService, },\n];\n}\n\nfunction StateStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nStateStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStateStorageService.ctorParameters;\n/** @type {?} */\nStateStorageService.prototype.$sessionStorage;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}