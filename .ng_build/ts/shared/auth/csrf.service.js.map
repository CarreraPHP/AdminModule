{"version":3,"sources":["csrf.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAE,aAAA,EAAc,MAAA,YAAA,CAAA;AACvB,MAEC;IADD;;OAEG;IACH,YAAwB,aAAe;QAAf,kBAAA,GAAA,aAAA,CAAe;IAAc,CAAA;IACrD;;;OAGG;IACH,OAHK,CAAA,IAAA;QAIG,IAAI,GAHG,GAAA,IAAI,CAAI,CAAA,CAAE,IAAA,CAAK,CAAA,CAAE,YAAA,EAAa,CAAE;QAIvC,OAHO,IAAA,CAAK,aAAC,CAAa,GAAC,CAAG,IAAC,CAAI,CAAC;IAIxC,CAAC;;AAFE,sBAAA,GAAoC;IAI3C,EAHE,IAAA,EAAM,UAAA,EAAW;CAIlB,CAHC;AAIF;;GAEG;AAJF,0BAAA,GAAA,GAAA,EAAA,CAAA;IAMD,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,CAAC;AAGF;IACA,gBAAgB;IAChB,WAAW,CAAC,UAAU,CAAC;IACvB;;;OAGG;IACH,WAAW,CAAC,cAAc,CAAC;IAC3B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC;AACpC,CAAC","file":"csrf.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie';\nexport class CSRFService {\n/**\n * @param {?} cookieService\n */\nconstructor(private cookieService: CookieService) {}\n/**\n * @param {?=} name\n * @return {?}\n */\ngetCSRF(name?: string) {\n        name = `${name ? name : 'XSRF-TOKEN'}`;\n        return this.cookieService.get(name);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CookieService, },\n];\n}\n\nfunction CSRFService_tsickle_Closure_declarations() {\n/** @type {?} */\nCSRFService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCSRFService.ctorParameters;\n/** @type {?} */\nCSRFService.prototype.cookieService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}