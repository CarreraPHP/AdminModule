{"version":3,"sources":["user-route-access-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAuC,MAAA,EAA4B,MAAA,iBAAA,CAAA;AAE1E,OAAO,EAAE,SAAA,EAAU,MAAA,KAAA,CAAA;AACnB,OAAO,EAAE,iBAAA,EAAkB,MAAA,8BAAA,CAAA;AAC3B,OAAO,EAAE,mBAAA,EAAoB,MAAA,yBAAA,CAAA;AAC7B,MAEC;IADD;;;;;OAKG;IACH,YAHwB,MAAQ,EACR,iBAAmB,EACnB,SAAW,EACX,mBAAqB;QAHrB,WAAA,GAAA,MAAA,CAAQ;QACR,sBAAA,GAAA,iBAAA,CAAmB;QACnB,cAAA,GAAA,SAAA,CAAW;QACX,wBAAA,GAAA,mBAAA,CAAqB;IAIzC,CAAC;IACL;;;;OAIG;IACH,WAPK,CAAA,KAAA,EAAA,KAAA;QASG,MAAM,gBAAgB,CAPhB,WAAA,GAAc,KAAA,CAAM,IAAC,CAAI,aAAC,CAAa,CAAC;QAQ9C,wFAAwF;QACxF,gFAAgF;QAChF,uCAAuC;QACvC,OAPO,IAAA,CAAK,UAAC,CAAU,WAAC,EAAY,KAAA,CAAM,GAAC,CAAG,CAAC;IAQnD,CAAC;IACL;;;;OAIG;IACH,UAXK,CAAA,WAAA,EAAA,GAAA;QAYG,MAAM,gBAAgB,CAXhB,SAAA,GAAY,IAAA,CAAK,SAAC,CAAS;QAYjC,OAXO,OAAA,CAAQ,OAAC,CAAO,SAAC,CAAS,QAAC,EAAQ,CAAE,IAAC,CAAI,CAAC,OAAC,EAAQ,EAAA;YAavD,IAAI,CAXC,WAAC,IAAc,WAAA,CAAY,MAAC,KAAU,CAAA,EAAG;gBAY1C,OAXO,IAAA,CAAK;aAYf;YAED,IAAI,OAXC,EAAQ;gBAYX,OAXO,SAAA,CAAU,eAAC,CAAe,WAAC,CAAW,CAAC,IAAC,CAY7C,CAAC,QAXC,EAAS,EAAA;oBAYT,IAAI,QAXC,EAAS;wBAYZ,OAXO,IAAA,CAAK;qBAYb;oBACD,OAXO,KAAA,CAAM;gBAYf,CAAC,CACF,CAXC;aAYH;YAED,IAAI,CAXC,mBAAC,CAAmB,QAAC,CAAQ,GAAC,CAAG,CAAC;YAYvC,IAAI,CAXC,MAAC,CAAM,QAAC,CAAQ,CAAC,cAAC,CAAc,CAAC,CAAC,IAAC,CAAI,GAAG,EAAA;gBAY3C,+DAA+D;gBAC/D,IAAI,CAXC,OAAC,EAAQ;oBAYV,IAAI,CAXC,iBAAC,CAAiB,IAAC,EAAI,CAAE;iBAYjC;YACL,CAAC,CAXC,CAAC;YAYH,OAXO,KAAA,CAAM;QAYjB,CAAC,CAXC,CAAC,CAAC;IAEV,CAAA;;AAAK,iCAAA,GAAoC;IAY3C,EAXE,IAAA,EAAM,UAAA,EAAW;CAYlB,CAXC;AAYF;;GAEG;AAZF,qCAAA,GAAA,GAAA,EAAA,CAAA;IAcD,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,CAAC;AAGF;IACA,gBAAgB;IAChB,sBAAsB,CAAC,UAAU,CAAC;IAClC;;;OAGG;IACH,sBAAsB,CAAC,cAAc,CAAC;IACtC,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,MAAM,CAAC;IACxC,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACnD,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC3C,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,mBAAmB,CAAC;AACrD,CAAC","file":"user-route-access-service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Principal } from '../';\nimport { LoginModalService } from '../login/login-modal.service';\nimport { StateStorageService } from './state-storage.service';\nexport class UserRouteAccessService implements CanActivate {\n/**\n * @param {?} router\n * @param {?} loginModalService\n * @param {?} principal\n * @param {?} stateStorageService\n */\nconstructor(private router: Router,\nprivate loginModalService: LoginModalService,\nprivate principal: Principal,\nprivate stateStorageService: StateStorageService) {\n    }\n/**\n * @param {?} route\n * @param {?} state\n * @return {?}\n */\ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\n\n        const /** @type {?} */ authorities = route.data['authorities'];\n        // We need to call the checkLogin / and so the principal.identity() function, to ensure,\n        // that the client has a principal too, if they already logged in by the server.\n        // This could happen on a page refresh.\n        return this.checkLogin(authorities, state.url);\n    }\n/**\n * @param {?} authorities\n * @param {?} url\n * @return {?}\n */\ncheckLogin(authorities: string[], url: string): Promise<boolean> {\n        const /** @type {?} */ principal = this.principal;\n        return Promise.resolve(principal.identity().then((account) => {\n\n            if (!authorities || authorities.length === 0) {\n                return true;\n            }\n\n            if (account) {\n              return principal.hasAnyAuthority(authorities).then(\n                (response) => {\n                  if (response) {\n                    return true;\n                  }\n                  return false;\n                }\n              );\n            }\n\n            this.stateStorageService.storeUrl(url);\n            this.router.navigate(['accessdenied']).then(() => {\n                // only show the login dialog, if the user hasn't logged in yet\n                if (!account) {\n                    this.loginModalService.open();\n                }\n            });\n            return false;\n        }));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: LoginModalService, },\n{type: Principal, },\n{type: StateStorageService, },\n];\n}\n\nfunction UserRouteAccessService_tsickle_Closure_declarations() {\n/** @type {?} */\nUserRouteAccessService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserRouteAccessService.ctorParameters;\n/** @type {?} */\nUserRouteAccessService.prototype.router;\n/** @type {?} */\nUserRouteAccessService.prototype.loginModalService;\n/** @type {?} */\nUserRouteAccessService.prototype.principal;\n/** @type {?} */\nUserRouteAccessService.prototype.stateStorageService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}