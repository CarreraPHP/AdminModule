{"version":3,"sources":["login.component.ts"],"names":[],"mappings":"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","file":"login.component.js","sourceRoot":"","sourcesContent":["import { Component, AfterViewInit, Renderer, ElementRef } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Router } from '@angular/router';\nimport { JhiEventManager } from 'ng-jhipster';\n\nimport { LoginService } from './login.service';\nimport { StateStorageService } from '../auth/state-storage.service';\nexport class JhiLoginModalComponent implements AfterViewInit {\n    authenticationError: boolean;\n    password: string;\n    rememberMe: boolean;\n    username: string;\n    credentials: any;\n/**\n * @param {?} eventManager\n * @param {?} loginService\n * @param {?} stateStorageService\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} router\n * @param {?} activeModal\n */\nconstructor(\nprivate eventManager: JhiEventManager,\nprivate loginService: LoginService,\nprivate stateStorageService: StateStorageService,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer,\nprivate router: Router,\npublic activeModal: NgbActiveModal\n    ) {\n        this.credentials = {};\n    }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n        this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#username'), 'focus', []);\n    }\n/**\n * @return {?}\n */\ncancel() {\n        this.credentials = {\n            username: null,\n            password: null,\n            rememberMe: true\n        };\n        this.authenticationError = false;\n        this.activeModal.dismiss('cancel');\n    }\n/**\n * @return {?}\n */\nlogin() {\n        this.loginService.login({\n            username: this.username,\n            password: this.password,\n            rememberMe: this.rememberMe\n        }).then(() => {\n            this.authenticationError = false;\n            this.activeModal.dismiss('login success');\n            if (this.router.url === '/register' || (/^\\/activate\\//.test(this.router.url)) ||\n                (/^\\/reset\\//.test(this.router.url))) {\n                this.router.navigate(['']);\n            }\n\n            this.eventManager.broadcast({\n                name: 'authenticationSuccess',\n                content: 'Sending Authentication Success'\n            });\n\n            // // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n            // // since login is succesful, go to stored previousState and clear previousState\n            const /** @type {?} */ redirect = this.stateStorageService.getUrl();\n            if (redirect) {\n                this.stateStorageService.storeUrl(null);\n                this.router.navigate([redirect]);\n            }\n        }).catch(() => {\n            this.authenticationError = true;\n        });\n    }\n/**\n * @return {?}\n */\nregister() {\n        this.activeModal.dismiss('to state register');\n        this.router.navigate(['/register']);\n    }\n/**\n * @return {?}\n */\nrequestResetPassword() {\n        this.activeModal.dismiss('to state requestReset');\n        this.router.navigate(['/reset', 'request']);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-login-modal',\n    template: `\n      <div class=\"modal-header\">\n          <h4 class=\"modal-title\" jhiTranslate=\"login.title\">Sign in</h4>\n          <button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" (click)=\"activeModal.dismiss('closed')\"><span aria-hidden=\"true\">x</span>\n          </button>\n      </div>\n      <div class=\"modal-body\">\n          <div class=\"row justify-content-center\">\n              <div class=\"col-md-8\">\n                  <div class=\"alert alert-danger\" *ngIf=\"authenticationError\" jhiTranslate=\"login.messages.error.authentication\">\n                      <strong>Failed to sign in!</strong> Please check your credentials and try again.\n                  </div>\n              </div>\n              <div class=\"col-md-8\">\n                  <form class=\"form\" role=\"form\" (ngSubmit)=\"login()\">\n                      <div class=\"form-group\">\n                          <label for=\"username\" jhiTranslate=\"global.form.username\">Login</label>\n                          <input type=\"text\" class=\"form-control\" name=\"username\" id=\"username\" placeholder=\"{{'global.form.username.placeholder' | translate}}\"\n                          [(ngModel)]=\"username\">\n                      </div>\n                      <div class=\"form-group\">\n                          <label for=\"password\" jhiTranslate=\"login.form.password\">Password</label>\n                          <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"{{'login.form.password.placeholder' | translate}}\"\n                                 [(ngModel)]=\"password\">\n                      </div>\n                      <div class=\"form-check\">\n                          <label class=\"form-check-label\" for=\"rememberMe\">\n                              <input class=\"form-check-input\" type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" [(ngModel)]=\"rememberMe\" checked>\n                              <span jhiTranslate=\"login.form.rememberme\">Remember me</span>\n                          </label>\n                      </div>\n                      <button type=\"submit\" class=\"btn btn-primary\" jhiTranslate=\"login.form.button\">Sign in</button>\n                  </form>\n                  <p></p>\n                  <div class=\"alert alert-warning\">\n                      <a class=\"alert-link\" (click)=\"requestResetPassword()\" jhiTranslate=\"login.password.forgot\">Did you forget your password?</a>\n                  </div>\n                  <div class=\"alert alert-warning\">\n                      <span jhiTranslate=\"global.messages.info.register.noaccount\">You don't have an account yet?</span>\n                      <a class=\"alert-link\" (click)=\"register()\" jhiTranslate=\"global.messages.info.register.link\">Register a new account</a>\n                  </div>\n              </div>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JhiEventManager, },\n{type: LoginService, },\n{type: StateStorageService, },\n{type: ElementRef, },\n{type: Renderer, },\n{type: Router, },\n{type: NgbActiveModal, },\n];\n}\n\nfunction JhiLoginModalComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiLoginModalComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiLoginModalComponent.ctorParameters;\n/** @type {?} */\nJhiLoginModalComponent.prototype.authenticationError;\n/** @type {?} */\nJhiLoginModalComponent.prototype.password;\n/** @type {?} */\nJhiLoginModalComponent.prototype.rememberMe;\n/** @type {?} */\nJhiLoginModalComponent.prototype.username;\n/** @type {?} */\nJhiLoginModalComponent.prototype.credentials;\n/** @type {?} */\nJhiLoginModalComponent.prototype.eventManager;\n/** @type {?} */\nJhiLoginModalComponent.prototype.loginService;\n/** @type {?} */\nJhiLoginModalComponent.prototype.stateStorageService;\n/** @type {?} */\nJhiLoginModalComponent.prototype.elementRef;\n/** @type {?} */\nJhiLoginModalComponent.prototype.renderer;\n/** @type {?} */\nJhiLoginModalComponent.prototype.router;\n/** @type {?} */\nJhiLoginModalComponent.prototype.activeModal;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}