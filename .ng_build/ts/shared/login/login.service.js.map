{"version":3,"sources":["login.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAE,kBAAA,EAAmB,MAAA,aAAA,CAAA;AAE5B,OAAO,EAAE,SAAA,EAAU,MAAA,2BAAA,CAAA;AACnB,OAAO,EAAE,kBAAA,EAAmB,MAAA,6BAAA,CAAA;AAC5B,MAEC;IADD;;;;OAIG;IACH,YADgB,eAAiB,EACjB,SAAW,EACX,kBAAoB;QAFpB,oBAAA,GAAA,eAAA,CAAiB;QACjB,cAAA,GAAA,SAAA,CAAW;QACX,uBAAA,GAAA,kBAAA,CAAoB;IAG7B,CAAC;IACR;;;;OAIG;IACH,KANK,CAAA,WAAA,EAAA,QAAA;QAOG,MAAM,gBAAgB,CANhB,EAAA,GAAK,QAAA,IAAY,cAAW,CAAA,CAAG;QAQrC,OANO,IAAI,OAAA,CAAQ,CAAC,OAAC,EAAQ,MAAA,EAAQ,EAAA;YAOjC,IAAI,CANC,kBAAC,CAAkB,KAAC,CAAK,WAAC,CAAW,CAAC,SAAC,CAAS,CAAC,IAAC,EAAK,EAAA;gBAOxD,IAAI,CANC,SAAC,CAAS,QAAC,CAAQ,IAAC,CAAI,CAAC,IAAC,CAAI,CAAC,OAAC,EAAQ,EAAA;oBAOzC,kDAAkD;oBAClD,4DAA4D;oBAC5D,IAAI,OANC,KAAW,IAAA,EAAM;wBAOlB,IAAI,CANC,eAAC,CAAe,cAAC,CAAc,OAAC,CAAO,OAAC,CAAO,CAAC;qBAOxD;oBACD,OAAO,CANC,IAAC,CAAI,CAAC;gBAOlB,CAAC,CANC,CAAC;gBAOH,OANO,EAAA,EAAG,CAAE;YAOhB,CAAC,EANE,CAAA,GAAE,EAAI,EAAA;gBAOL,IAAI,CANC,MAAC,EAAM,CAAE;gBAOd,MAAM,CANC,GAAC,CAAG,CAAC;gBAOZ,OANO,EAAA,CAAG,GAAC,CAAG,CAAC;YAOnB,CAAC,CANC,CAAC;QAOP,CAAC,CANC,CAAC;IAOP,CAAC;IACL;;OAEG;IACH,MARK;QASG,IAAI,IARC,CAAI,SAAC,CAAS,eAAC,EAAe,EAAG;YASlC,IAAI,CARC,kBAAC,CAAkB,MAAC,EAAM,CAAE,SAAC,EAAS,CAAE;SAShD;QACD,IAAI,CARC,SAAC,CAAS,YAAC,CAAY,IAAC,CAAI,CAAC;IAStC,CAAC;;AAPE,uBAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,UAAA,EAAW;CASlB,CARC;AASF;;GAEG;AATF,2BAAA,GAAA,GAAA,EAAA,CAAA;IAWD,EAAC,IAAI,EAAE,kBAAkB,GAAG;IAC5B,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,CAAC;AAGF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,eAAe,CAAC;IACvC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;IACjC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC1C,CAAC","file":"login.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { JhiLanguageService } from 'ng-jhipster';\n\nimport { Principal } from '../auth/principal.service';\nimport { AuthServerProvider } from '../auth/auth-oauth2.service';\nexport class LoginService {\n/**\n * @param {?} languageService\n * @param {?} principal\n * @param {?} authServerProvider\n */\nconstructor(\nprivate languageService: JhiLanguageService,\nprivate principal: Principal,\nprivate authServerProvider: AuthServerProvider\n    ) {}\n/**\n * @param {?} credentials\n * @param {?=} callback\n * @return {?}\n */\nlogin(credentials, callback?) {\n        const /** @type {?} */ cb = callback || function() {};\n\n        return new Promise((resolve, reject) => {\n            this.authServerProvider.login(credentials).subscribe((data) => {\n                this.principal.identity(true).then((account) => {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account !== null) {\n                        this.languageService.changeLanguage(account.langKey);\n                    }\n                    resolve(data);\n                });\n                return cb();\n            }, (err) => {\n                this.logout();\n                reject(err);\n                return cb(err);\n            });\n        });\n    }\n/**\n * @return {?}\n */\nlogout() {\n        if (this.principal.isAuthenticated()) {\n            this.authServerProvider.logout().subscribe();\n        }\n        this.principal.authenticate(null);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JhiLanguageService, },\n{type: Principal, },\n{type: AuthServerProvider, },\n];\n}\n\nfunction LoginService_tsickle_Closure_declarations() {\n/** @type {?} */\nLoginService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoginService.ctorParameters;\n/** @type {?} */\nLoginService.prototype.languageService;\n/** @type {?} */\nLoginService.prototype.principal;\n/** @type {?} */\nLoginService.prototype.authServerProvider;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}