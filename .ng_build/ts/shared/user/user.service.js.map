{"version":3,"sources":["user.service.ts"],"names":[],"mappings":"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","file":"user.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\nimport { SERVER_API_URL } from '../../app.constants';\nimport { User } from './user.model';\nimport { ResponseWrapper } from '../model/response-wrapper.model';\nimport { createRequestOption } from '../model/request-util';\nexport class UserService {\nprivate resourceUrl = SERVER_API_URL + 'api/users';\n/**\n * @param {?} http\n */\nconstructor(private http: Http) { }\n/**\n * @param {?} user\n * @return {?}\n */\ncreate(user: User): Observable<ResponseWrapper> {\n        return this.http.post(this.resourceUrl, user)\n            .map((res: Response) => this.convertResponse(res));\n    }\n/**\n * @param {?} user\n * @return {?}\n */\nupdate(user: User): Observable<ResponseWrapper> {\n        return this.http.put(this.resourceUrl, user)\n            .map((res: Response) => this.convertResponse(res));\n    }\n/**\n * @param {?} login\n * @return {?}\n */\nfind(login: string): Observable<User> {\n        return this.http.get(`${this.resourceUrl}/${login}`).map((res: Response) => res.json());\n    }\n/**\n * @param {?=} req\n * @return {?}\n */\nquery(req?: any): Observable<ResponseWrapper> {\n        const /** @type {?} */ options = createRequestOption(req);\n        return this.http.get(this.resourceUrl, options)\n            .map((res: Response) => this.convertResponse(res));\n    }\n/**\n * @param {?} login\n * @return {?}\n */\ndelete(login: string): Observable<Response> {\n        return this.http.delete(`${this.resourceUrl}/${login}`);\n    }\n/**\n * @return {?}\n */\nauthorities(): Observable<string[]> {\n        return this.http.get(SERVER_API_URL + 'api/users/authorities').map((res: Response) => {\n            const /** @type {?} */ json = res.json();\n            return /** @type {?} */(( <string[]> json));\n        });\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate convertResponse(res: Response): ResponseWrapper {\n        const /** @type {?} */ jsonResponse = res.json();\n        return new ResponseWrapper(res.headers, jsonResponse, res.status);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction UserService_tsickle_Closure_declarations() {\n/** @type {?} */\nUserService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserService.ctorParameters;\n/** @type {?} */\nUserService.prototype.resourceUrl;\n/** @type {?} */\nUserService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}