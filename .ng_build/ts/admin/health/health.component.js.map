{"version":3,"sources":["health.component.ts"],"names":[],"mappings":"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","file":"health.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiHealthService } from './health.service';\nimport { JhiHealthModalComponent } from './health-modal.component';\nexport class JhiHealthCheckComponent implements OnInit {\n    healthData: any;\n    updatingHealth: boolean;\n/**\n * @param {?} modalService\n * @param {?} healthService\n */\nconstructor(\nprivate modalService: NgbModal,\nprivate healthService: JhiHealthService\n    ) {\n\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.refresh();\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nbaseName(name: string) {\n        return this.healthService.getBaseName(name);\n    }\n/**\n * @param {?} statusState\n * @return {?}\n */\ngetBadgeClass(statusState) {\n        if (statusState === 'UP') {\n            return 'badge-success';\n        } else {\n            return 'badge-danger';\n        }\n    }\n/**\n * @return {?}\n */\nrefresh() {\n        this.updatingHealth = true;\n\n        this.healthService.checkHealth().subscribe((health) => {\n            this.healthData = this.healthService.transformHealthData(health);\n            this.updatingHealth = false;\n        }, (error) => {\n            if (error.status === 503) {\n                this.healthData = this.healthService.transformHealthData(error.json());\n                this.updatingHealth = false;\n            }\n        });\n    }\n/**\n * @param {?} health\n * @return {?}\n */\nshowHealth(health: any) {\n        const /** @type {?} */ modalRef  = this.modalService.open(JhiHealthModalComponent);\n        modalRef.componentInstance.currentHealth = health;\n        modalRef.result.then((result) => {\n            // Left blank intentionally, nothing to do here\n        }, (reason) => {\n            // Left blank intentionally, nothing to do here\n        });\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nsubSystemName(name: string) {\n        return this.healthService.getSubSystemName(name);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-health',\n    template: `\n      <div>\n          <h2>\n              <span jhiTranslate=\"health.title\">Health Checks</span>\n              <button class=\"btn btn-primary float-right\" (click)=\"refresh()\">\n                  <span class=\"fa fa-refresh\"></span> <span jhiTranslate=\"health.refresh.button\">Refresh</span>\n              </button>\n          </h2>\n          <div class=\"table-responsive\">\n              <table id=\"healthCheck\" class=\"table table-striped\">\n                  <thead>\n                      <tr>\n                          <th jhiTranslate=\"health.table.service\">Service Name</th>\n                          <th class=\"text-center\" jhiTranslate=\"health.table.status\">Status</th>\n                          <th class=\"text-center\" jhiTranslate=\"health.details.details\">Details</th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr *ngFor=\"let health of healthData\">\n                          <td>{{'health.indicator.' + baseName(health.name) | translate}} {{subSystemName(health.name)}}</td>\n                          <td class=\"text-center\">\n                              <span class=\"badge\" [ngClass]=\"getBadgeClass(health.status)\" jhiTranslate=\"{{'health.status.' + health.status}}\">\n                                  {{health.status}}\n                              </span>\n                          </td>\n                          <td class=\"text-center\">\n                              <a class=\"hand\" (click)=\"showHealth(health)\" *ngIf=\"health.details || health.error\">\n                                  <i class=\"fa fa-eye\"></i>\n                              </a>\n                          </td>\n                      </tr>\n                  </tbody>\n              </table>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbModal, },\n{type: JhiHealthService, },\n];\n}\n\nfunction JhiHealthCheckComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiHealthCheckComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiHealthCheckComponent.ctorParameters;\n/** @type {?} */\nJhiHealthCheckComponent.prototype.healthData;\n/** @type {?} */\nJhiHealthCheckComponent.prototype.updatingHealth;\n/** @type {?} */\nJhiHealthCheckComponent.prototype.modalService;\n/** @type {?} */\nJhiHealthCheckComponent.prototype.healthService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}