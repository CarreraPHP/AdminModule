{"version":3,"sources":["health.service.ts"],"names":[],"mappings":"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","file":"health.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nexport class JhiHealthService {\n\n    separator: string;\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {\n        this.separator = '.';\n    }\n/**\n * @return {?}\n */\ncheckHealth(): Observable<any> {\n        return this.http.get('management/health').map((res: Response) => res.json());\n    }\n/**\n * @param {?} data\n * @return {?}\n */\ntransformHealthData(data): any {\n        const /** @type {?} */ response = [];\n        this.flattenHealthData(response, null, data);\n        return response;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\ngetBaseName(name): string {\n        if (name) {\n            const /** @type {?} */ split = name.split('.');\n            return split[0];\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\ngetSubSystemName(name): string {\n        if (name) {\n            const /** @type {?} */ split = name.split('.');\n            split.splice(0, 1);\n            const /** @type {?} */ remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n/**\n * @param {?} result\n * @param {?} isLeaf\n * @param {?} healthObject\n * @param {?} name\n * @return {?}\n */\nprivate addHealthObject(result, isLeaf, healthObject, name): any {\n        const /** @type {?} */ healthData: any = {\n            name\n        };\n\n        const /** @type {?} */ details = {};\n        let /** @type {?} */ hasDetails = false;\n\n        for (const /** @type {?} */ key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const /** @type {?} */ value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n/**\n * @param {?} result\n * @param {?} path\n * @param {?} data\n * @return {?}\n */\nprivate flattenHealthData(result, path, data): any {\n        for (const /** @type {?} */ key in data) {\n            if (data.hasOwnProperty(key)) {\n                const /** @type {?} */ value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    } else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n/**\n * @param {?} path\n * @param {?} name\n * @return {?}\n */\nprivate getModuleName(path, name): string {\n        let /** @type {?} */ result;\n        if (path && name) {\n            result = path + this.separator + name;\n        }  else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    }\n/**\n * @param {?} healthObject\n * @return {?}\n */\nprivate hasSubSystem(healthObject): boolean {\n        let /** @type {?} */ result = false;\n\n        for (const /** @type {?} */ key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const /** @type {?} */ value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n/**\n * @param {?} healthObject\n * @return {?}\n */\nprivate isHealthObject(healthObject): boolean {\n        let /** @type {?} */ result = false;\n\n        for (const /** @type {?} */ key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction JhiHealthService_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiHealthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiHealthService.ctorParameters;\n/** @type {?} */\nJhiHealthService.prototype.separator;\n/** @type {?} */\nJhiHealthService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}