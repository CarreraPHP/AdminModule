{"version":3,"sources":["health-modal.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAU,MAAA,eAAA,CAAA;AACnB,OAAO,EAAE,cAAA,EAAe,MAAA,4BAAA,CAAA;AAExB,OAAO,EAAE,gBAAA,EAAiB,MAAA,kBAAA,CAAA;AAC1B,MAEC;IACD;;;OAGG;IACH,YADwB,aAAe,EAAyB,WAAa;QAArD,kBAAA,GAAA,aAAA,CAAe;QAAyB,gBAAA,GAAA,WAAA,CAAa;IAAe,CAAA;IAG5F;;;OAGG;IACH,QALK,CAAA,IAAA;QAMG,OALO,IAAA,CAAK,aAAC,CAAa,WAAC,CAAW,IAAC,CAAI,CAAC;IAMhD,CAAC;IACL;;;OAGG;IACH,aARK,CAAA,IAAA;QASG,OARO,IAAA,CAAK,aAAC,CAAa,gBAAC,CAAgB,IAAC,CAAI,CAAC;IASrD,CAAC;IACL;;;OAGG;IACH,aAXK,CAAA,KAAA;QAYG,IAAI,IAXC,CAAI,aAAC,CAAa,IAAC,KAAQ,WAAA,EAAa;YAYzC,OAXO,KAAA,CAAM,QAAC,EAAQ,CAAE;SAY3B;QAED,yDAAyD;QACzD,MAAM,gBAAgB,CAXhB,GAAA,GAAM,KAAA,GAAQ,UAAA,CAAW;QAY/B,IAAI,GAXC,GAAK,CAAA,EAAG,EAAE,QAAA;YAYX,OAXO,GAAA,CAAI,OAAC,CAAO,CAAC,CAAC,GAAG,KAAA,CAAM;SAYjC;aAXM;YAYH,OAXO,CAAA,KAAE,GAAO,OAAA,CAAQ,CAAC,OAAC,CAAO,CAAC,CAAC,GAAG,KAAA,CAAM;SAY/C;IACL,CAAC;;AAVE,kCAAA,GAAoC;IAY3C,EAXE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAYrB,QAAQ,EAXE,kBAAA;gBAYV,QAAQ,EAXE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgDT;aACJ,EAXC,EAAG;CAYJ,CAXC;AAYF;;GAEG;AAZF,sCAAA,GAAA,GAAA,EAAA,CAAA;IAcD,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,CAAC;AAGF;IACA,gBAAgB;IAChB,uBAAuB,CAAC,UAAU,CAAC;IACnC;;;OAGG;IACH,uBAAuB,CAAC,cAAc,CAAC;IACvC,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,aAAa,CAAC;IAChD,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,aAAa,CAAC;IAChD,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC9C,CAAC","file":"health-modal.component.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiHealthService } from './health.service';\nexport class JhiHealthModalComponent {\n\n    currentHealth: any;\n/**\n * @param {?} healthService\n * @param {?} activeModal\n */\nconstructor(private healthService: JhiHealthService,\npublic activeModal: NgbActiveModal) {}\n/**\n * @param {?} name\n * @return {?}\n */\nbaseName(name) {\n        return this.healthService.getBaseName(name);\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nsubSystemName(name) {\n        return this.healthService.getSubSystemName(name);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nreadableValue(value: number) {\n        if (this.currentHealth.name !== 'diskSpace') {\n            return value.toString();\n        }\n\n        // Should display storage space in an human readable unit\n        const /** @type {?} */ val = value / 1073741824;\n        if (val > 1) { // Value\n            return val.toFixed(2) + ' GB';\n        } else {\n            return (value / 1048576).toFixed(2) + ' MB';\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-health-modal',\n    template: `\n      <div class=\"modal-header\">\n          <h4 class=\"modal-title\" id=\"showHealthLabel\">\n      \t\t{{'health.indicator.' + baseName(currentHealth.name) | translate}}\n              {{subSystemName(currentHealth.name)}}\n          </h4>\n          <button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" (click)=\"activeModal.dismiss('closed')\"><span aria-hidden=\"true\">&times;</span>\n          </button>\n      </div>\n      <div class=\"modal-body pad\">\n          <div *ngIf=\"currentHealth.details\">\n              <h5 jhiTranslate=\"health.details.properties\">Properties</h5>\n              <div class=\"table-responsive\">\n                  <table class=\"table table-striped\">\n                      <thead>\n                          <tr>\n                              <th class=\"text-left\" jhiTranslate=\"health.details.name\">Name</th>\n                              <th class=\"text-left\" jhiTranslate=\"health.details.value\">Value</th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                          <tr *ngFor=\"let entry of currentHealth.details | keys\">\n                              <td class=\"text-left\">{{entry.key}}</td>\n                              <td class=\"text-left\">{{readableValue(entry.value)}}</td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </div>\n          </div>\n          <div *ngIf=\"currentHealth.error\">\n              <h4 jhiTranslate=\"health.details.error\">Error</h4>\n                  <pre>{{currentHealth.error}}</pre>\n          </div>\n      </div>\n      <div class=\"modal-footer\">\n          <button data-dismiss=\"modal\" class=\"btn btn-secondary float-left\" type=\"button\" (click)=\"activeModal.dismiss('closed')\">Done</button>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JhiHealthService, },\n{type: NgbActiveModal, },\n];\n}\n\nfunction JhiHealthModalComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiHealthModalComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiHealthModalComponent.ctorParameters;\n/** @type {?} */\nJhiHealthModalComponent.prototype.currentHealth;\n/** @type {?} */\nJhiHealthModalComponent.prototype.healthService;\n/** @type {?} */\nJhiHealthModalComponent.prototype.activeModal;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}