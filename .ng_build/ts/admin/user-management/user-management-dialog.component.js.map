{"version":3,"sources":["user-management-dialog.component.ts"],"names":[],"mappings":"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","file":"user-management-dialog.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { JhiEventManager } from 'ng-jhipster';\n\nimport { UserModalService } from './user-modal.service';\nimport { JhiLanguageHelper, User, UserService } from '../../shared';\nexport class UserMgmtDialogComponent implements OnInit {\n\n    user: User;\n    languages: any[];\n    authorities: any[];\n    isSaving: Boolean;\n/**\n * @param {?} activeModal\n * @param {?} languageHelper\n * @param {?} userService\n * @param {?} eventManager\n */\nconstructor(\npublic activeModal: NgbActiveModal,\nprivate languageHelper: JhiLanguageHelper,\nprivate userService: UserService,\nprivate eventManager: JhiEventManager\n    ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        this.isSaving = false;\n        this.authorities = [];\n        this.userService.authorities().subscribe((authorities) => {\n            this.authorities = authorities;\n        });\n        this.languageHelper.getAll().then((languages) => {\n            this.languages = languages;\n        });\n    }\n/**\n * @return {?}\n */\nclear() {\n        this.activeModal.dismiss('cancel');\n    }\n/**\n * @return {?}\n */\nsave() {\n        this.isSaving = true;\n        if (this.user.id !== null) {\n            this.userService.update(this.user).subscribe((response) => this.onSaveSuccess(response), () => this.onSaveError());\n        } else {\n            this.userService.create(this.user).subscribe((response) => this.onSaveSuccess(response), () => this.onSaveError());\n        }\n    }\n/**\n * @param {?} result\n * @return {?}\n */\nprivate onSaveSuccess(result) {\n        this.eventManager.broadcast({ name: 'userListModification', content: 'OK' });\n        this.isSaving = false;\n        this.activeModal.dismiss(result);\n    }\n/**\n * @return {?}\n */\nprivate onSaveError() {\n        this.isSaving = false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-user-mgmt-dialog',\n    template: `\n      <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" #editForm=\"ngForm\">\n\n          <div class=\"modal-header\">\n              <h4 class=\"modal-title\" id=\"myUserLabel\" jhiTranslate=\"userManagement.home.createOrEditLabel\">\n                  Create or edit a User</h4>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"\n                  (click)=\"clear()\">&times;</button>\n          </div>\n          <div class=\"modal-body\">\n              <jhi-alert-error></jhi-alert-error>\n              <div class=\"form-group\" [hidden]=\"!user.id\">\n                  <label jhiTranslate=\"global.field.id\">ID</label>\n                  <input type=\"text\" class=\"form-control\" name=\"id\"\n                         [(ngModel)]=\"user.id\" readonly>\n              </div>\n\n              <div class=\"form-group\">\n                  <label class=\"form-control-label\" jhiTranslate=\"userManagement.login\">Login</label>\n                  <input type=\"text\" class=\"form-control\" name=\"login\" #loginInput=\"ngModel\"\n                         [(ngModel)]=\"user.login\" required minlength=\"1\" maxlength=\"50\" pattern=\"^[_'.@A-Za-z0-9-]*$\">\n\n                  <div *ngIf=\"loginInput.dirty && loginInput.invalid\">\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"loginInput.errors.required\" jhiTranslate=\"entity.validation.required\">\n                          This field is required.\n                      </small>\n\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"loginInput.errors.maxlength\" jhiTranslate=\"entity.validation.maxlength\"\n                         translateValues=\"{max: 50}\">\n                          This field cannot be longer than 50 characters.\n                      </small>\n                  </div>\n              </div>\n              <div class=\"form-group\">\n                  <label class=\"form-control-label\" jhiTranslate=\"userManagement.firstName\">First Name</label>\n                  <input type=\"text\" class=\"form-control\" name=\"firstName\" #firstNameInput=\"ngModel\"\n                         [(ngModel)]=\"user.firstName\" maxlength=\"50\">\n\n                  <div *ngIf=\"firstNameInput.dirty && firstNameInput.invalid\">\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"firstNameInput.errors.maxlength\" jhiTranslate=\"entity.validation.maxlength\"\n                         translateValues=\"{max: 50}\">\n                          This field cannot be longer than 50 characters.\n                      </small>\n                  </div>\n              </div>\n              <div class=\"form-group\">\n                  <label jhiTranslate=\"userManagement.lastName\">Last Name</label>\n                  <input type=\"text\" class=\"form-control\" name=\"lastName\" #lastNameInput=\"ngModel\"\n                         [(ngModel)]=\"user.lastName\" maxlength=\"50\">\n\n                  <div *ngIf=\"lastNameInput.dirty && lastNameInput.invalid\">\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"lastNameInput.errors.maxlength\" jhiTranslate=\"entity.validation.maxlength\"\n                         translateValues=\"{max: 50}\">\n                          This field cannot be longer than 50 characters.\n                      </small>\n                  </div>\n              </div>\n              <div class=\"form-group\">\n                  <label class=\"form-control-label\" jhiTranslate=\"userManagement.email\">Email</label>\n                  <input type=\"email\" class=\"form-control\" name=\"email\" #emailInput=\"ngModel\"\n                         [(ngModel)]=\"user.email\" minlength=\"5\" required maxlength=\"100\" email>\n\n                  <div *ngIf=\"emailInput.dirty && emailInput.invalid\">\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"emailInput.errors.required\" jhiTranslate=\"entity.validation.required\">\n                          This field is required.\n                      </small>\n\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"emailInput.errors.maxlength\" jhiTranslate=\"entity.validation.maxlength\"\n                         translateValues=\"{max: 100}\">\n                          This field cannot be longer than 100 characters.\n                      </small>\n\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"emailInput.errors.minlength\" jhiTranslate=\"entity.validation.minlength\"\n                         translateValues=\"{min: 5}\">\n                          This field is required to be at least 5 characters.\n                      </small>\n\n                      <small class=\"form-text text-danger\"\n                         *ngIf=\"emailInput.errors.email\" jhiTranslate=\"global.messages.validate.email.invalid\">\n                          Your email is invalid.\n                       </small>\n                  </div>\n              </div>\n              <div class=\"form-check\">\n                  <label class=\"form-check-label\" for=\"activated\">\n                      <input class=\"form-check-input\" [disabled]=\"user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" [(ngModel)]=\"user.activated\">\n                      <span jhiTranslate=\"userManagement.activated\">Activated</span>\n                  </label>\n              </div>\n\n              <div class=\"form-group\" *ngIf=\"languages && languages.length > 0\">\n                  <label jhiTranslate=\"userManagement.langKey\">Lang Key</label>\n                  <select class=\"form-control\" id=\"langKey\" name=\"langKey\" [(ngModel)]=\"user.langKey\">\n                      <option *ngFor=\"let language of languages\" [value]=\"language\">{{language | findLanguageFromKey}}</option>\n                  </select>\n              </div>\n              <div class=\"form-group\">\n                  <label jhiTranslate=\"userManagement.profiles\">Profiles</label>\n                  <select class=\"form-control\" multiple name=\"authority\" [(ngModel)]=\"user.authorities\">\n                      <option *ngFor=\"let authority of authorities\" [value]=\"authority\">{{authority}}</option>\n                  </select>\n              </div>\n          </div>\n          <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"clear()\">\n                  <span class=\"fa fa-ban\"></span>&nbsp;<span\n                  jhiTranslate=\"entity.action.cancel\">Cancel</span>\n              </button>\n              <button type=\"submit\" [disabled]=\"editForm.form.invalid || isSaving\" class=\"btn btn-primary\">\n                  <span class=\"fa fa-floppy-o\"></span>&nbsp;<span jhiTranslate=\"entity.action.save\">Save</span>\n              </button>\n          </div>\n      </form>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbActiveModal, },\n{type: JhiLanguageHelper, },\n{type: UserService, },\n{type: JhiEventManager, },\n];\n}\n\nfunction UserMgmtDialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nUserMgmtDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserMgmtDialogComponent.ctorParameters;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.user;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.languages;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.authorities;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.isSaving;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.activeModal;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.languageHelper;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.userService;\n/** @type {?} */\nUserMgmtDialogComponent.prototype.eventManager;\n}\n\nexport class UserDialogComponent implements OnInit, OnDestroy {\n\n    modalRef: NgbModalRef;\n    routeSub: any;\n/**\n * @param {?} route\n * @param {?} userModalService\n */\nconstructor(\nprivate route: ActivatedRoute,\nprivate userModalService: UserModalService\n    ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        this.routeSub = this.route.params.subscribe((params) => {\n            if ( params['login'] ) {\n                this.modalRef = this.userModalService.open( /** @type {?} */((UserMgmtDialogComponent as Component)), params['login']);\n            } else {\n                this.modalRef = this.userModalService.open( /** @type {?} */((UserMgmtDialogComponent as Component)));\n            }\n        });\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        this.routeSub.unsubscribe();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-user-dialog',\n    template: ''\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActivatedRoute, },\n{type: UserModalService, },\n];\n}\n\nfunction UserDialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nUserDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserDialogComponent.ctorParameters;\n/** @type {?} */\nUserDialogComponent.prototype.modalRef;\n/** @type {?} */\nUserDialogComponent.prototype.routeSub;\n/** @type {?} */\nUserDialogComponent.prototype.route;\n/** @type {?} */\nUserDialogComponent.prototype.userModalService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}