{"version":3,"sources":["user-modal.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAsB,MAAA,eAAA,CAAA;AAC/B,OAAO,EAAE,MAAA,EAAO,MAAA,iBAAA,CAAA;AAChB,OAAO,EAAE,QAAA,EAAsB,MAAA,4BAAA,CAAA;AAE/B,OAAO,EAAE,IAAA,EAAM,WAAA,EAAY,MAAA,cAAA,CAAA;AAC3B,MAEC;IAAD;;;;OAIG;IACH,YAFgB,YAAc,EACd,MAAQ,EACR,WAAa;QAFb,iBAAA,GAAA,YAAA,CAAc;QACd,WAAA,GAAA,MAAA,CAAQ;QACR,gBAAA,GAAA,WAAA,CAAa;QAJjB,WAAA,GAAS,KAAA,CAAM;IAQpB,CAAC;IACR;;;;OAIG;IACH,IAPK,CAAA,SAAA,EAAA,KAAA;QAQG,IAAI,IAPC,CAAI,MAAC,EAAO;YAQb,OAAO;SACV;QACD,IAAI,CAPC,MAAC,GAAQ,IAAA,CAAK;QASnB,IAAI,KAPC,EAAM;YAQP,IAAI,CAPC,WAAC,CAAW,IAAC,CAAI,KAAC,CAAK,CAAC,SAAC,CAAS,CAAC,IAAC,EAAK,EAAA,CAAG,IAAA,CAAK,YAAC,CAAY,SAAC,EAAU,IAAA,CAAK,CAAC,CAAC;SAQxF;aAPM;YAQH,OAPO,IAAA,CAAK,YAAC,CAAY,SAAC,EAAU,IAAI,IAAA,EAAK,CAAE,CAAC;SAQnD;IACL,CAAC;IACL;;;;OAIG;IACH,YAXK,CAAA,SAAA,EAAA,IAAA;QAYG,MAAM,gBAAgB,CAXhB,QAAA,GAAW,IAAA,CAAK,YAAC,CAAY,IAAC,CAAI,SAAC,EAAU,EAAE,IAAA,EAAM,IAAA,EAAM,QAAA,EAAU,QAAA,EAAS,CAAC,CAAC;QAYtF,QAAQ,CAXC,iBAAC,CAAiB,IAAC,GAAM,IAAA,CAAK;QAYvC,QAAQ,CAXC,MAAC,CAAM,IAAC,CAAI,CAAC,MAAC,EAAO,EAAA;YAY1B,IAAI,CAXC,MAAC,CAAM,QAAC,CAAQ,CAAC,EAAE,OAAA,EAAS,EAAE,KAAA,EAAO,IAAA,EAAK,EAAE,CAAC,EAAE,EAAE,UAAA,EAAY,IAAA,EAAK,CAAE,CAAC;YAY1E,IAAI,CAXC,MAAC,GAAQ,KAAA,CAAM;QAYxB,CAAC,EAXE,CAAA,MAAE,EAAO,EAAA;YAYR,IAAI,CAXC,MAAC,CAAM,QAAC,CAAQ,CAAC,EAAE,OAAA,EAAS,EAAE,KAAA,EAAO,IAAA,EAAK,EAAE,CAAC,EAAE,EAAE,UAAA,EAAY,IAAA,EAAK,CAAE,CAAC;YAY1E,IAAI,CAXC,MAAC,GAAQ,KAAA,CAAM;QAYxB,CAAC,CAXC,CAAC;QAGT,OAFa,QAAA,CAAS;IAYpB,CAAC;;AAVE,2BAAA,GAAoC;IAY3C,EAXE,IAAA,EAAM,UAAA,EAAW;CAYlB,CAXC;AAYF;;GAEG;AAZF,+BAAA,GAAA,GAAA,EAAA,CAAA;IAcD,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CAAC;AAGF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAClC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,YAAY,CAAC;IACxC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAClC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;AACvC,CAAC","file":"user-modal.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { User, UserService } from '../../shared';\nexport class UserModalService {\nprivate isOpen = false;\n/**\n * @param {?} modalService\n * @param {?} router\n * @param {?} userService\n */\nconstructor(\nprivate modalService: NgbModal,\nprivate router: Router,\nprivate userService: UserService\n    ) {}\n/**\n * @param {?} component\n * @param {?=} login\n * @return {?}\n */\nopen(component: Component, login?: string): NgbModalRef {\n        if (this.isOpen) {\n            return;\n        }\n        this.isOpen = true;\n\n        if (login) {\n            this.userService.find(login).subscribe((user) => this.userModalRef(component, user));\n        } else {\n            return this.userModalRef(component, new User());\n        }\n    }\n/**\n * @param {?} component\n * @param {?} user\n * @return {?}\n */\nuserModalRef(component: Component, user: User): NgbModalRef {\n        const /** @type {?} */ modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static'});\n        modalRef.componentInstance.user = user;\n        modalRef.result.then((result) => {\n            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true });\n            this.isOpen = false;\n        }, (reason) => {\n            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true });\n            this.isOpen = false;\n        });\n        return modalRef;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbModal, },\n{type: Router, },\n{type: UserService, },\n];\n}\n\nfunction UserModalService_tsickle_Closure_declarations() {\n/** @type {?} */\nUserModalService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserModalService.ctorParameters;\n/** @type {?} */\nUserModalService.prototype.isOpen;\n/** @type {?} */\nUserModalService.prototype.modalService;\n/** @type {?} */\nUserModalService.prototype.router;\n/** @type {?} */\nUserModalService.prototype.userService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}