{"version":3,"sources":["audits.component.ts"],"names":[],"mappings":"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","file":"audits.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { JhiParseLinks } from 'ng-jhipster';\n\nimport { Audit } from './audit.model';\nimport { AuditsService } from './audits.service';\nimport { ITEMS_PER_PAGE } from '../../shared';\nimport { PaginationConfig } from '../../blocks/config/uib-pagination.config';\nexport class AuditsComponent implements OnInit {\n    audits: Audit[];\n    fromDate: string;\n    itemsPerPage: any;\n    links: any;\n    page: number;\n    orderProp: string;\n    reverse: boolean;\n    toDate: string;\n    totalItems: number;\n/**\n * @param {?} auditsService\n * @param {?} parseLinks\n * @param {?} paginationConfig\n * @param {?} datePipe\n */\nconstructor(\nprivate auditsService: AuditsService,\nprivate parseLinks: JhiParseLinks,\nprivate paginationConfig: PaginationConfig,\nprivate datePipe: DatePipe\n    ) {\n        this.itemsPerPage = ITEMS_PER_PAGE;\n        this.page = 1;\n        this.reverse = false;\n        this.orderProp = 'timestamp';\n    }\n/**\n * @return {?}\n */\ngetAudits() {\n        return this.sortAudits(this.audits);\n    }\n/**\n * @param {?} page\n * @return {?}\n */\nloadPage(page: number) {\n        this.page = page;\n        this.onChangeDate();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.today();\n        this.previousMonth();\n        this.onChangeDate();\n    }\n/**\n * @return {?}\n */\nonChangeDate() {\n        this.auditsService.query({page: this.page - 1, size: this.itemsPerPage,\n            fromDate: this.fromDate, toDate: this.toDate}).subscribe((res) => {\n\n            this.audits = res.json();\n            this.links = this.parseLinks.parse(res.headers.get('link'));\n            this.totalItems = + res.headers.get('X-Total-Count');\n        });\n    }\n/**\n * @return {?}\n */\npreviousMonth() {\n        const /** @type {?} */ dateFormat = 'yyyy-MM-dd';\n        let /** @type {?} */ fromDate: Date = new Date();\n\n        if (fromDate.getMonth() === 0) {\n            fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n        } else {\n            fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n        }\n\n        this.fromDate = this.datePipe.transform(fromDate, dateFormat);\n    }\n/**\n * @return {?}\n */\ntoday() {\n        const /** @type {?} */ dateFormat = 'yyyy-MM-dd';\n        // Today + 1 day - needed if the current day must be included\n        const /** @type {?} */ today: Date = new Date();\n        today.setDate(today.getDate() + 1);\n        const /** @type {?} */ date = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        this.toDate = this.datePipe.transform(date, dateFormat);\n    }\n/**\n * @param {?} audits\n * @return {?}\n */\nprivate sortAudits(audits: Audit[]) {\n        audits = audits.slice(0).sort((a, b) => {\n            if (a[this.orderProp] < b[this.orderProp]) {\n                return -1;\n            } else if ([b[this.orderProp] < a[this.orderProp]]) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        return this.reverse ? audits.reverse() : audits;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'jhi-audit',\n  template: `\n    <div *ngIf=\"audits\">\n        <h2 jhiTranslate=\"audits.title\">Audits</h2>\n\n        <div class=\"row\">\n            <div class=\"col-md-5\">\n                <h4 jhiTranslate=\"audits.filter.title\">Filter by date</h4>\n                <p class=\"d-flex\">\n                    <span jhiTranslate=\"audits.filter.from\" class=\"input-group-addon\">from</span>\n                    <input type=\"date\" class=\"form-control\" name=\"start\" [(ngModel)]=\"fromDate\" (ngModelChange)=\"onChangeDate($event)\" required/>\n                    <span jhiTranslate=\"audits.filter.to\" class=\"input-group-addon\">to</span>\n                    <input type=\"date\" class=\"form-control\" name=\"end\" [(ngModel)]=\"toDate\" (ngModelChange)=\"onChangeDate($event)\" required/>\n                </p>\n            </div>\n        </div>\n\n        <div class=\"table-responsive\">\n            <table class=\"table table-sm table-striped table-bordered\">\n                <thead>\n                <tr>\n                    <th (click)=\"orderProp = 'timestamp'; reverse=!reverse\"><span jhiTranslate=\"audits.table.header.date\">Date</span></th>\n                    <th (click)=\"orderProp = 'principal'; reverse=!reverse\"><span jhiTranslate=\"audits.table.header.principal\">User</span></th>\n                    <th (click)=\"orderProp = 'type'; reverse=!reverse\"><span jhiTranslate=\"audits.table.header.status\">State</span></th>\n                    <th (click)=\"orderProp = 'data.message'; reverse=!reverse\"><span jhiTranslate=\"audits.table.header.data\">Extra data</span></th>\n                </tr>\n                </thead>\n                <tr *ngFor=\"let audit of getAudits()\">\n                    <td><span>{{audit.timestamp| date:'medium'}}</span></td>\n                    <td><small>{{audit.principal}}</small></td>\n                    <td>{{audit.type}}</td>\n                    <td>\n                        <span *ngIf=\"audit.data\" ng-show=\"audit.data.message\">{{audit.data.message}}</span>\n                        <span *ngIf=\"audit.data\" ng-show=\"audit.data.remoteAddress\"><span jhiTranslate=\"audits.table.data.remoteAddress\">Remote Address</span> {{audit.data.remoteAddress}}</span>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <div *ngIf=\"audits\">\n            <div class=\"row justify-content-center\">\n                <jhi-item-count [page]=\"page\" [total]=\"totalItems\" [itemsPerPage]=\"itemsPerPage\"></jhi-item-count>\n            </div>\n            <div class=\"row justify-content-center\">\n                <ngb-pagination [collectionSize]=\"totalItems\" [(page)]=\"page\" (pageChange)=\"loadPage(page)\"></ngb-pagination>\n            </div>\n        </div>\n    </div>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuditsService, },\n{type: JhiParseLinks, },\n{type: PaginationConfig, },\n{type: DatePipe, },\n];\n}\n\nfunction AuditsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAuditsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuditsComponent.ctorParameters;\n/** @type {?} */\nAuditsComponent.prototype.audits;\n/** @type {?} */\nAuditsComponent.prototype.fromDate;\n/** @type {?} */\nAuditsComponent.prototype.itemsPerPage;\n/** @type {?} */\nAuditsComponent.prototype.links;\n/** @type {?} */\nAuditsComponent.prototype.page;\n/** @type {?} */\nAuditsComponent.prototype.orderProp;\n/** @type {?} */\nAuditsComponent.prototype.reverse;\n/** @type {?} */\nAuditsComponent.prototype.toDate;\n/** @type {?} */\nAuditsComponent.prototype.totalItems;\n/** @type {?} */\nAuditsComponent.prototype.auditsService;\n/** @type {?} */\nAuditsComponent.prototype.parseLinks;\n/** @type {?} */\nAuditsComponent.prototype.paginationConfig;\n/** @type {?} */\nAuditsComponent.prototype.datePipe;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}