{"version":3,"sources":["metrics.component.ts"],"names":[],"mappings":"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","file":"metrics.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiMetricsMonitoringModalComponent } from './metrics-modal.component';\nimport { JhiMetricsService } from './metrics.service';\nexport class JhiMetricsMonitoringComponent implements OnInit {\n    metrics: any = {};\n    cachesStats: any = {};\n    servicesStats: any = {};\n    updatingMetrics = true;\n    JCACHE_KEY: string;\n/**\n * @param {?} modalService\n * @param {?} metricsService\n */\nconstructor(\nprivate modalService: NgbModal,\nprivate metricsService: JhiMetricsService\n    ) {\n        this.JCACHE_KEY = 'jcache.statistics';\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.refresh();\n    }\n/**\n * @return {?}\n */\nrefresh() {\n        this.updatingMetrics = true;\n        this.metricsService.getMetrics().subscribe((metrics) => {\n            this.metrics = metrics;\n            this.updatingMetrics = false;\n            this.servicesStats = {};\n            this.cachesStats = {};\n            Object.keys(metrics.timers).forEach((key) => {\n                const /** @type {?} */ value = metrics.timers[key];\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    this.servicesStats[key] = value;\n                }\n            });\n            Object.keys(metrics.gauges).forEach((key) => {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    const /** @type {?} */ value = metrics.gauges[key].value;\n                    // remove gets or puts\n                    const /** @type {?} */ index = key.lastIndexOf('.');\n                    const /** @type {?} */ newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    this.cachesStats[newKey] = {\n                        'name': this.JCACHE_KEY.length,\n                        'value': value\n                    };\n                }\n            });\n        });\n    }\n/**\n * @return {?}\n */\nrefreshThreadDumpData() {\n        this.metricsService.threadDump().subscribe((data) => {\n            const /** @type {?} */ modalRef  = this.modalService.open(JhiMetricsMonitoringModalComponent, { size: 'lg'});\n            modalRef.componentInstance.threadDump = data;\n            modalRef.result.then((result) => {\n                // Left blank intentionally, nothing to do here\n            }, (reason) => {\n                // Left blank intentionally, nothing to do here\n            });\n        });\n    }\n/**\n * @param {?} input\n * @return {?}\n */\nfilterNaN(input) {\n        if (isNaN(input)) {\n            return 0;\n        }\n        return input;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-metrics',\n    template: `\n      <div>\n          <h2>\n              <span jhiTranslate=\"metrics.title\">Application Metrics</span>\n              <button class=\"btn btn-primary float-right\" (click)=\"refresh()\">\n                  <span class=\"fa fa-refresh\"></span> <span jhiTranslate=\"metrics.refresh.button\">Refresh</span>\n              </button>\n          </h2>\n\n          <h3 jhiTranslate=\"metrics.jvm.title\">JVM Metrics</h3>\n          <div class=\"row\" *ngIf=\"!updatingMetrics\">\n              <div class=\"col-md-4\">\n                  <b jhiTranslate=\"metrics.jvm.memory.title\">Memory</b>\n                  <p><span jhiTranslate=\"metrics.jvm.memory.total\">Total Memory</span> ({{metrics.gauges['jvm.memory.total.used'].value / 1000000 | number:'1.0-0'}}M / {{metrics.gauges['jvm.memory.total.max'].value / 1000000 | number:'1.0-0'}}M)</p>\n                  <ngb-progressbar type=\"success\" [max]=\"metrics.gauges['jvm.memory.total.max'].value\" [value]=\"metrics.gauges['jvm.memory.total.used'].value\" [striped]=\"true\" [animated]=\"true\">\n                      <span>{{metrics.gauges['jvm.memory.total.used'].value * 100 / metrics.gauges['jvm.memory.total.max'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n                  <p><span jhiTranslate=\"metrics.jvm.memory.heap\">Heap Memory</span> ({{metrics.gauges['jvm.memory.heap.used'].value / 1000000 | number:'1.0-0'}}M / {{metrics.gauges['jvm.memory.heap.max'].value / 1000000 | number:'1.0-0'}}M)</p>\n                  <ngb-progressbar [max]=\"metrics.gauges['jvm.memory.heap.max'].value\" [value]=\"metrics.gauges['jvm.memory.heap.used'].value\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                      <span>{{metrics.gauges['jvm.memory.heap.used'].value * 100 / metrics.gauges['jvm.memory.heap.max'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n                  <p><span jhiTranslate=\"metrics.jvm.memory.nonheap\">Non-Heap Memory</span> ({{metrics.gauges['jvm.memory.non-heap.used'].value / 1000000 | number:'1.0-0'}}M / {{metrics.gauges['jvm.memory.non-heap.committed'].value / 1000000 | number:'1.0-0'}}M)</p>\n                  <ngb-progressbar [max]=\"metrics.gauges['jvm.memory.non-heap.committed'].value\" [value]=\"metrics.gauges['jvm.memory.non-heap.used'].value\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                      <span>{{metrics.gauges['jvm.memory.non-heap.used'].value * 100 / metrics.gauges['jvm.memory.non-heap.committed'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n              </div>\n              <div class=\"col-md-4\">\n                  <b jhiTranslate=\"metrics.jvm.threads.title\">Threads</b> (Total: {{metrics.gauges['jvm.threads.count'].value}}) <a class=\"hand\" (click)=\"refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"fa fa-eye\"></i></a>\n                  <p><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{metrics.gauges['jvm.threads.runnable.count'].value}}</p>\n                  <ngb-progressbar [value]=\"metrics.gauges['jvm.threads.runnable.count'].value\" [max]=\"metrics.gauges['jvm.threads.count'].value\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                      <span>{{metrics.gauges['jvm.threads.runnable.count'].value * 100 / metrics.gauges['jvm.threads.count'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n                  <p><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{metrics.gauges['jvm.threads.timed_waiting.count'].value}})</p>\n                  <ngb-progressbar [value]=\"metrics.gauges['jvm.threads.timed_waiting.count'].value\" [max]=\"metrics.gauges['jvm.threads.count'].value\" [striped]=\"true\" [animated]=\"true\" type=\"warning\">\n                      <span>{{metrics.gauges['jvm.threads.timed_waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n                  <p><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{metrics.gauges['jvm.threads.waiting.count'].value}})</p>\n                  <ngb-progressbar [value]=\"metrics.gauges['jvm.threads.waiting.count'].value\" [max]=\"metrics.gauges['jvm.threads.count'].value\" [striped]=\"true\" [animated]=\"true\" type=\"warning\">\n                      <span>{{metrics.gauges['jvm.threads.waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n                  <p><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{metrics.gauges['jvm.threads.blocked.count'].value}})</p>\n                  <ngb-progressbar [value]=\"metrics.gauges['jvm.threads.blocked.count'].value\" [max]=\"metrics.gauges['jvm.threads.count'].value\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                      <span>{{metrics.gauges['jvm.threads.blocked.count'].value * 100 / metrics.gauges['jvm.threads.count'].value  | number:'1.0-0'}}%</span>\n                  </ngb-progressbar>\n              </div>\n              <div class=\"col-md-4\">\n                  <b jhiTranslate=\"metrics.jvm.gc.title\">Garbage collections</b>\n                  <div class=\"row\" *ngIf=\"metrics.gauges['jvm.garbage.PS-MarkSweep.count']\">\n                      <div class=\"col-md-9\" jhiTranslate=\"metrics.jvm.gc.marksweepcount\">Mark Sweep count</div>\n                      <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-MarkSweep.count'].value}}</div>\n                  </div>\n                  <div class=\"row\" *ngIf=\"metrics.gauges['jvm.garbage.PS-MarkSweep.time']\">\n                      <div class=\"col-md-9\" jhiTranslate=\"metrics.jvm.gc.marksweeptime\">Mark Sweep time</div>\n                      <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-MarkSweep.time'].value}}ms</div>\n                  </div>\n                  <div class=\"row\" *ngIf=\"metrics.gauges['jvm.garbage.PS-Scavenge.count']\">\n                      <div class=\"col-md-9\" jhiTranslate=\"metrics.jvm.gc.scavengecount\">Scavenge count</div>\n                      <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-Scavenge.count'].value}}</div>\n                  </div>\n                  <div class=\"row\" *ngIf=\"metrics.gauges['jvm.garbage.PS-Scavenge.time']\">\n                      <div class=\"col-md-9\" jhiTranslate=\"metrics.jvm.gc.scavengetime\">Scavenge time</div>\n                      <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-Scavenge.time'].value}}ms</div>\n                  </div>\n              </div>\n          </div>\n          <div class=\"well well-lg\" *ngIf=\"updatingMetrics\" jhiTranslate=\"metrics.updating\">Updating...</div>\n\n          <h3 jhiTranslate=\"metrics.jvm.http.title\">HTTP requests (events per second)</h3>\n          <p *ngIf=\"metrics.counters\">\n              <span jhiTranslate=\"metrics.jvm.http.active\">Active requests</span> <b>{{metrics.counters['com.codahale.metrics.servlet.InstrumentedFilter.activeRequests'].count | number:'1.0-0'}}</b> - <span jhiTranslate=\"metrics.jvm.http.total\">Total requests</span> <b>{{metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count | number:'1.0-0'}}</b>\n          </p>\n          <div class=\"table-responsive\" *ngIf=\"!updatingMetrics\">\n              <table class=\"table table-striped\">\n                  <thead>\n                  <tr>\n                      <th jhiTranslate=\"metrics.jvm.http.table.code\">Code</th>\n                      <th jhiTranslate=\"metrics.jvm.http.table.count\">Count</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.jvm.http.table.mean\">Mean</th>\n                      <th class=\"text-right\"><span jhiTranslate=\"metrics.jvm.http.table.average\">Average</span> (1 min)</th>\n                      <th class=\"text-right\"><span jhiTranslate=\"metrics.jvm.http.table.average\">Average</span> (5 min)</th>\n                      <th class=\"text-right\"><span jhiTranslate=\"metrics.jvm.http.table.average\">Average</span> (15 min)</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <tr>\n                      <td jhiTranslate=\"metrics.jvm.http.code.ok\">OK</td>\n                      <td>\n                          <ngb-progressbar [max]=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" [value]=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                              <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count}}</span>\n                          </ngb-progressbar>\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].mean_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m1_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m5_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m15_rate) | number:'1.0-2'}}\n                      </td>\n                  </tr>\n                  <tr>\n                      <td jhiTranslate=\"metrics.jvm.http.code.notfound\">Not Found</td>\n                      <td>\n                          <ngb-progressbar [max]=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" [value]=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                              <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count}}</span>\n                          </ngb-progressbar>\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].mean_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m1_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m5_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m15_rate) | number:'1.0-2'}}\n                      </td>\n                  </tr>\n                  <tr>\n                      <td jhiTranslate=\"metrics.jvm.http.code.servererror\">Server error</td>\n                      <td>\n                          <ngb-progressbar [max]=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" [value]=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                              <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count}}</span>\n                          </ngb-progressbar>\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].mean_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m1_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m5_rate) | number:'1.0-2'}}\n                      </td>\n                      <td class=\"text-right\">\n                          {{filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m15_rate) | number:'1.0-2'}}\n                      </td>\n                  </tr>\n                  </tbody>\n              </table>\n          </div>\n\n          <h3 jhiTranslate=\"metrics.servicesstats.title\">Services statistics (time in millisecond)</h3>\n          <div class=\"table-responsive\" *ngIf=\"!updatingMetrics\">\n              <table class=\"table table-striped\">\n                  <thead>\n                  <tr>\n                      <th jhiTranslate=\"metrics.servicesstats.table.name\">Service name</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.count\">Count</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.mean\">Mean</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n                      <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.max\">Max</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <tr *ngFor=\"let entry of servicesStats | keys\">\n                      <td>{{entry.key}}</td>\n                      <td class=\"text-right\">{{entry.value.count}}</td>\n                      <td class=\"text-right\">{{entry.value.mean * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.min * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.p50 * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.p75 * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.p95 * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.p99 * 1000 | number:'1.0-0'}}</td>\n                      <td class=\"text-right\">{{entry.value.max * 1000 | number:'1.0-0'}}</td>\n                  </tr>\n                  </tbody>\n              </table>\n          </div>\n    \n          <h3 jhiTranslate=\"metrics.datasource.title\" *ngIf=\"metrics.gauges && metrics.gauges['HikariPool-1.pool.TotalConnections'] && metrics.gauges['HikariPool-1.pool.TotalConnections'].value > 0\">DataSource statistics (time in millisecond)</h3>\n          <div class=\"table-responsive\" *ngIf=\"!updatingMetrics && metrics.gauges && metrics.gauges['HikariPool-1.pool.TotalConnections'] && metrics.gauges['HikariPool-1.pool.TotalConnections'].value > 0\">\n              <table class=\"table table-striped\">\n                  <thead>\n                      <tr>\n                          <th><span jhiTranslate=\"metrics.datasource.usage\">Usage</span> ({{metrics.gauges['HikariPool-1.pool.ActiveConnections'].value}} / {{metrics.gauges['HikariPool-1.pool.TotalConnections'].value}})</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.count\">Count</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.mean\">Mean</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.min\">Min</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.p50\">p50</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.p75\">p75</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.p95\">p95</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.p99\">p99</th>\n                          <th class=\"text-right\" jhiTranslate=\"metrics.datasource.max\">Max</th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr>\n                          <td>\n                              <div class=\"progress progress-striped\">\n                                  <ngb-progressbar [max]=\"metrics.gauges['HikariPool-1.pool.TotalConnections'].value\" [value]=\"metrics.gauges['HikariPool-1.pool.ActiveConnections'].value\" [striped]=\"true\" [animated]=\"true\" type=\"success\">\n                                      <span>{{metrics.gauges['HikariPool-1.pool.ActiveConnections'].value * 100 / metrics.gauges['HikariPool-1.pool.TotalConnections'].value  | number:'1.0-0'}}%</span>\n                                  </ngb-progressbar>\n                              </div>\n                          </td>\n                          <td class=\"text-right\">{{metrics.histograms['HikariPool-1.pool.Usage'].count}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].mean) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].min) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p50) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p75) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p95) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p99) | number:'1.0-2'}}</td>\n                          <td class=\"text-right\">{{filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].max) | number:'1.0-2'}}</td>\n                      </tr>\n                  </tbody>\n              </table>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbModal, },\n{type: JhiMetricsService, },\n];\n}\n\nfunction JhiMetricsMonitoringComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiMetricsMonitoringComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiMetricsMonitoringComponent.ctorParameters;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.metrics;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.cachesStats;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.servicesStats;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.updatingMetrics;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.JCACHE_KEY;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.modalService;\n/** @type {?} */\nJhiMetricsMonitoringComponent.prototype.metricsService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}