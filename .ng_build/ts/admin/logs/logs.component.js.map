{"version":3,"sources":["logs.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAkB,MAAA,eAAA,CAAA;AAE3B,OAAO,EAAE,GAAA,EAAI,MAAA,aAAA,CAAA;AACb,OAAO,EAAE,WAAA,EAAY,MAAA,gBAAA,CAAA;AACrB,MAEC;IAID;;OAEG;IACH,YACgB,WAAa;QAAb,gBAAA,GAAA,WAAA,CAAa;QAErB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IACL;;OAEG;IACH,QAFK;QAGG,IAAI,CAFC,WAAC,CAAW,OAAC,EAAO,CAAE,SAAC,CAAS,CAAC,OAAC,EAAQ,EAAA,CAAG,IAAA,CAAK,OAAC,GAAS,OAAA,CAAQ,CAAC;IAG9E,CAAC;IACL;;;;OAIG;IACH,WANK,CAAA,IAAA,EAAA,KAAA;QAOG,MAAM,gBAAgB,CANhB,GAAA,GAAM,IAAI,GAAA,CAAI,IAAC,EAAK,KAAA,CAAM,CAAC;QAOjC,IAAI,CANC,WAAC,CAAW,WAAC,CAAW,GAAC,CAAG,CAAC,SAAC,CAAS,GAAG,EAAA;YAO3C,IAAI,CANC,WAAC,CAAW,OAAC,EAAO,CAAE,SAAC,CAAS,CAAC,OAAC,EAAQ,EAAA,CAAG,IAAA,CAAK,OAAC,GAAS,OAAA,CAAQ,CAAC;QAO9E,CAAC,CANC,CAAC;IAOP,CAAC;;AALE,wBAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAOrB,QAAQ,EANE,UAAA;gBAOV,QAAQ,EANE;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCT;aACJ,EANC,EAAG;CAOJ,CANC;AAOF;;GAEG;AAPF,4BAAA,GAAA,GAAA,EAAA,CAAA;IASD,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CAAC;AAGF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC","file":"logs.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\nimport { Log } from './log.model';\nimport { LogsService } from './logs.service';\nexport class LogsComponent implements OnInit {\n\n    loggers: Log[];\n    filter: string;\n    orderProp: string;\n    reverse: boolean;\n/**\n * @param {?} logsService\n */\nconstructor(\nprivate logsService: LogsService\n    ) {\n        this.filter = '';\n        this.orderProp = 'name';\n        this.reverse = false;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.logsService.findAll().subscribe((loggers) => this.loggers = loggers);\n    }\n/**\n * @param {?} name\n * @param {?} level\n * @return {?}\n */\nchangeLevel(name: string, level: string) {\n        const /** @type {?} */ log = new Log(name, level);\n        this.logsService.changeLevel(log).subscribe(() => {\n            this.logsService.findAll().subscribe((loggers) => this.loggers = loggers);\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'jhi-logs',\n    template: `\n      <div class=\"table-responsive\" *ngIf=\"loggers\">\n          <h2 jhiTranslate=\"logs.title\">Logs</h2>\n\n          <p jhiTranslate=\"logs.nbloggers\" translateValues=\"{total: '{{ loggers.length }}'}\">There are {{ loggers.length }} loggers.</p>\n\n          <span jhiTranslate=\"logs.filter\">Filter</span> <input type=\"text\" [(ngModel)]=\"filter\" class=\"form-control\">\n\n          <table class=\"table table-sm table-striped table-bordered\">\n              <thead>\n              <tr title=\"click to order\">\n                  <th (click)=\"orderProp = 'name'; reverse=!reverse\"><span jhiTranslate=\"logs.table.name\">Name</span></th>\n                  <th (click)=\"orderProp = 'level'; reverse=!reverse\"><span jhiTranslate=\"logs.table.level\">Level</span></th>\n              </tr>\n              </thead>\n\n              <tr *ngFor=\"let logger of (loggers | pureFilter:filter:'name' | orderBy:orderProp:reverse)\">\n                  <td><small>{{logger.name | slice:0:140}}</small></td>\n                  <td>\n                      <button (click)=\"changeLevel(logger.name, 'TRACE')\" [ngClass]=\"(logger.level=='TRACE') ? 'btn-danger' : 'btn-secondary'\" class=\"btn btn-sm\">TRACE</button>\n                      <button (click)=\"changeLevel(logger.name, 'DEBUG')\" [ngClass]=\"(logger.level=='DEBUG') ? 'btn-warning' : 'btn-secondary'\" class=\"btn btn-sm\">DEBUG</button>\n                      <button (click)=\"changeLevel(logger.name, 'INFO')\" [ngClass]=\"(logger.level=='INFO') ? 'btn-info' : 'btn-secondary'\" class=\"btn btn-sm\">INFO</button>\n                      <button (click)=\"changeLevel(logger.name, 'WARN')\" [ngClass]=\"(logger.level=='WARN') ? 'btn-success' : 'btn-secondary'\" class=\"btn btn-sm\">WARN</button>\n                      <button (click)=\"changeLevel(logger.name, 'ERROR')\" [ngClass]=\"(logger.level=='ERROR') ? 'btn-primary' : 'btn-secondary'\" class=\"btn btn-sm\">ERROR</button>\n                  </td>\n              </tr>\n          </table>\n      </div>\n    `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LogsService, },\n];\n}\n\nfunction LogsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nLogsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLogsComponent.ctorParameters;\n/** @type {?} */\nLogsComponent.prototype.loggers;\n/** @type {?} */\nLogsComponent.prototype.filter;\n/** @type {?} */\nLogsComponent.prototype.orderProp;\n/** @type {?} */\nLogsComponent.prototype.reverse;\n/** @type {?} */\nLogsComponent.prototype.logsService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}