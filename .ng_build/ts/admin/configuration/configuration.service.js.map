{"version":3,"sources":["configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAE,IAAA,EAAe,MAAA,eAAA,CAAA;AAExB,MAEC;IADD;;OAEG;IACH,YAAwB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;IAC1B,CAAC;IACL;;OAEG;IACH,GAFK;QAGG,OAFO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,wBAAC,CAAwB,CAAC,GAAC,CAAG,CAAC,GAAK,EAAU,EAAA;YAG/D,MAAM,gBAAgB,CAFhB,UAAA,GAAoB,EAAA,CAAG;YAI7B,MAAM,gBAAgB,CAFhB,gBAAA,GAAmB,GAAA,CAAI,IAAC,EAAI,CAAE;YAIpC,KAAK,MAFC,gBAAA,CAAK,GAAA,IAAO,gBAAA,EAAkB;gBAGhC,IAAI,gBAFC,CAAgB,cAAC,CAAc,GAAC,CAAG,EAAE;oBAGtC,UAAU,CAFC,IAAC,CAAI,gBAAC,CAAgB,GAAC,CAAG,CAAC,CAAC;iBAG1C;aACJ;YAED,OAFO,UAAA,CAAW,IAAC,CAAI,CAAC,SAAC,EAAU,SAAA,EAAW,EAAA;gBAG1C,OAFO,CAAA,SAAE,CAAS,MAAC,KAAU,SAAA,CAAU,MAAC,CAAM,CAAC,CAAA,CAAE,CAAA,CAAE,CAAA;oBAG5C,CAAC,SAFC,CAAS,MAAC,GAAQ,SAAA,CAAU,MAAC,CAAM,CAAC,CAAA,CAAE,CAAA,CAAE,CAAC,CAAA,CAAE,CAAA,CAAE;YAG1D,CAAC,CAFC,CAAC;QAGP,CAAC,CAFC,CAAC;IAGP,CAAC;IACL;;OAEG;IACH,MAJK;QAKG,OAJO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,gBAAC,CAAgB,CAAC,GAAC,CAAG,CAAC,GAAK,EAAU,EAAA;YAKvD,MAAM,gBAAgB,CAJhB,UAAA,GAAkB,EAAA,CAAG;YAM3B,MAAM,gBAAgB,CAJhB,gBAAA,GAAmB,GAAA,CAAI,IAAC,EAAI,CAAE;YAMpC,KAAK,MAJC,gBAAA,CAAK,GAAA,IAAO,gBAAA,EAAkB;gBAKhC,IAAI,gBAJC,CAAgB,cAAC,CAAc,GAAC,CAAG,EAAE;oBAKtC,MAAM,gBAAgB,CAJhB,UAAA,GAAa,gBAAA,CAAiB,GAAC,CAAG,CAAC;oBAKzC,MAAM,gBAAgB,CAJhB,IAAA,GAAc,EAAA,CAAG;oBAMvB,KAAK,MAJC,gBAAA,CAAK,MAAA,IAAU,UAAA,EAAY;wBAK7B,IAAI,UAJC,CAAU,cAAC,CAAc,MAAC,CAAM,EAAE;4BAKnC,IAAI,CAJC,IAAC,CAAI,EAAC,GAAC,EAAI,MAAA,EAAQ,GAAA,EAAK,UAAA,CAAW,MAAC,CAAM,EAAC,CAAC,CAAC;yBAKrD;qBACJ;oBACD,UAAU,CAJC,GAAC,CAAG,GAAG,IAAA,CAAK;iBAK1B;aACJ;YAED,OAJO,UAAA,CAAW;QAKtB,CAAC,CAJC,CAAC;IAKP,CAAC;;AAHE,kCAAA,GAAoC;IAK3C,EAJE,IAAA,EAAM,UAAA,EAAW;CAKlB,CAJC;AAKF;;GAEG;AALF,sCAAA,GAAA,GAAA,EAAA,CAAA;IAOD,EAAC,IAAI,EAAE,IAAI,GAAG;CACb,CAAC;AAGF;IACA,gBAAgB;IAChB,uBAAuB,CAAC,UAAU,CAAC;IACnC;;;OAGG;IACH,uBAAuB,CAAC,cAAc,CAAC;IACvC,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,IAAI,CAAC;AACvC,CAAC","file":"configuration.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nexport class JhiConfigurationService {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {\n    }\n/**\n * @return {?}\n */\nget(): Observable<any> {\n        return this.http.get('management/configprops').map((res: Response) => {\n            const /** @type {?} */ properties: any[] = [];\n\n            const /** @type {?} */ propertiesObject = res.json();\n\n            for (const /** @type {?} */ key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n\n            return properties.sort((propertyA, propertyB) => {\n                return (propertyA.prefix === propertyB.prefix) ? 0 :\n                       (propertyA.prefix < propertyB.prefix) ? -1 : 1;\n            });\n        });\n    }\n/**\n * @return {?}\n */\ngetEnv(): Observable<any> {\n        return this.http.get('management/env').map((res: Response) => {\n            const /** @type {?} */ properties: any = {};\n\n            const /** @type {?} */ propertiesObject = res.json();\n\n            for (const /** @type {?} */ key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    const /** @type {?} */ valsObject = propertiesObject[key];\n                    const /** @type {?} */ vals: any[] = [];\n\n                    for (const /** @type {?} */ valKey in valsObject) {\n                        if (valsObject.hasOwnProperty(valKey)) {\n                            vals.push({key: valKey, val: valsObject[valKey]});\n                        }\n                    }\n                    properties[key] = vals;\n                }\n            }\n\n            return properties;\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction JhiConfigurationService_tsickle_Closure_declarations() {\n/** @type {?} */\nJhiConfigurationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJhiConfigurationService.ctorParameters;\n/** @type {?} */\nJhiConfigurationService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}